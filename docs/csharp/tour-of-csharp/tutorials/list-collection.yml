### YamlMime:Tutorial
title: Научитесь управлять коллекциями данных с использованием универсального типа списка
metadata:
  title: Коллекции данных. Интерактивное вводное руководство по C#
  description: В этом руководстве для интерактивного изучения C# используется браузер. Вы напишете код C# и сможете просмотреть результаты его компиляции и выполнения непосредственно в браузере.
  audience: Developer
  ms.custom: mvc
  ms.topic: interactive-tutorial
  ms.date: 10/23/2018
  level: Beginner
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: 26fded8a82771672825825ce5d617ef200f18542
  ms.sourcegitcommit: f0fc5db7bcbf212e46933e9cf2d555bb82666141
  ms.translationtype: HT
  ms.contentlocale: ru-RU
  ms.lasthandoff: 02/17/2021
  ms.locfileid: "100626666"
items:
- durationInMinutes: 1
  content: >
    Это руководство поможет в интерактивном изучении C#. С помощью браузера вы напишете код C# и сможете просмотреть результаты его компиляции и выполнения. Он содержит ряд уроков, где вы создаете, меняете и изучаете коллекции и массивы.
- title: Создание списков
  durationInMinutes: 2
  content: >
    Запустите приведенный ниже код в интерактивном окне. Нажмите кнопку **Перейти в режим фокусировки**. Затем введите следующий блок кода в интерактивном окне (замените `<name>` своим именем) и нажмите кнопку **Выполнить**:


    ```csharp

    var names = new List<string> { "<name>", "Ana", "Felipe" };

    foreach (var name in names)

    {
      Console.WriteLine($"Hello {name.ToUpper()}!");
    }

    ```


    Если выполнение происходит в вашей среде, следуйте инструкциям для [локальной версии](arrays-and-collections.md).


    Вы создали список строк, добавили три имени в этот список и вывели имена прописными буквами. Для циклического прохода по списку вы примените концепции, которые изучили в предыдущих руководствах.


    В коде для отображения имен используется функция [интерполяции строк](../../language-reference/tokens/interpolated.md). Если перед `string` добавить символ `$`, код C# можно внедрять в объявление строки. Фактическая строка заменяет код C# генерируемым значением. В этом примере она заменяет `{name.ToUpper()}` именами, буквы каждого из которых преобразованы в прописные, так как вызван метод <xref:System.String.ToUpper%2A?displayProperty=nameWithType>.


    Продолжим изучение.
- title: Изменение содержимого списка
  durationInMinutes: 3
  content: >
    В созданной коллекции используется тип <xref:System.Collections.Generic.List%601>. При применении такого типа сохраняются последовательности элементов. Тип элементов указывается в угловых скобках.


    Важный аспект типа <xref:System.Collections.Generic.List%601> — возможность увеличения или уменьшения, что позволяет добавлять или удалять элементы. Вы можете просмотреть результаты, изменив содержимое после его отображения. Добавьте следующий код после кода, который вы уже написали (ниже цикла, который выводит содержимое):


    ```csharp

    Console.WriteLine();

    names.Add("Maria");

    names.Add("Bill");

    names.Remove("Ana");

    foreach (var name in names)

    {
      Console.WriteLine($"Hello {name.ToUpper()}!");
    }

    ```


    В конец списка добавлены еще два имени. При этом одно имя удалено. Выходные данные из этого блока кода показывают начальное содержимое, а затем выводят пустую строку и новое содержимое.


    <xref:System.Collections.Generic.List%601> позволяет добавлять ссылки на отдельные элементы по **индексу**. Доступ к элементам осуществляется при помощи токенов `[` и `]`. Добавьте следующий фрагмент после написанного кода и протестируйте результат:


    ```csharp

    Console.WriteLine($"My name is {names[0]}.");

    Console.WriteLine($"I've added {names[2]} and {names[3]} to the list.");

    ```


    Доступ за пределами списка не предоставляется. Вы можете проверить, как долго в списке используется свойство <xref:System.Collections.Generic.List%601.Count%2A>. Добавьте следующий код, чтобы протестировать его:


    ```csharp

    Console.WriteLine($"The list has {names.Count} people in it");

    ```


    Снова нажмите кнопку **Выполнить**, чтобы просмотреть результаты. В C# индексы начинаются с 0, поэтому максимальный допустимый индекс меньше, чем число элементов в списке.
- title: Поиск по спискам и их сортировка
  durationInMinutes: 5
  content: >
    В наших примерах используются сравнительно небольшие списки. Но приложения часто создают списки с гораздо большим количеством элементов, иногда они исчисляются в тысячах. Чтобы найти элементы в таких больших коллекциях, необходимо выполнить поиск различных элементов по списку. Метод <xref:System.Collections.Generic.List%601.IndexOf%2A> выполняет поиск элемента и возвращает его индекс. Если элемент отсутствует в списке, `IndexOf` возвращает `-1`. Попробуйте, чтобы узнать, как это работает.  Добавьте следующий фрагмент после написанного кода:


    ```csharp

    var index = names.IndexOf("Felipe");

    if (index != -1)
      Console.WriteLine($"The name {names[index]} is at index {index}");

    var notFound = names.IndexOf("Not Found");

    Console.WriteLine($"When an item is not found, IndexOf returns {notFound}");

    ```


    Мы не всегда можем знать, присутствует ли элемент в списке, поэтому нужно обязательно проверять индекс, возвращенный <xref:System.Collections.Generic.List%601.IndexOf%2A>. Если он имеет значение `-1`, элемент не найден.


    Кроме того, можно сортировать элементы в списке. Метод <xref:System.Collections.Generic.List%601.Sort%2A> сортирует все элементы списка в обычном порядке (строки — в алфавитном). Добавьте следующий фрагмент и снова выполните код:


    ```csharp

    names.Sort();

    foreach (var name in names)

    {
      Console.WriteLine($"Hello {name.ToUpper()}!");
    }

    ```
- title: Списки других типов
  durationInMinutes: 5
  content: >
    Вы уже использовали в списках тип `string`. Создадим <xref:System.Collections.Generic.List%601> с использованием другого типа. Сначала создадим набор чисел. Удалите код, который вы написали, и замените его следующим кодом:


    ```csharp

    var fibonacciNumbers = new List<int> {1, 1};

    ```


    Будет создан список целых чисел. Для первых двух целых чисел будет задано значение 1. *Последовательность Фибоначчи*, последовательность чисел, начинается с двух единиц. Каждое следующее число Фибоначчи — это сумма двух предыдущих чисел. Добавьте этот код:


    ```csharp

    var previous = fibonacciNumbers[fibonacciNumbers.Count - 1];

    var previous2 = fibonacciNumbers[fibonacciNumbers.Count - 2];


    fibonacciNumbers.Add(previous + previous2);


    foreach(var item in fibonacciNumbers)
        Console.WriteLine(item);
    ```


    Нажмите кнопку **Выполнить**, чтобы просмотреть результаты.
- title: Задача
  durationInMinutes: 10
  content: >
    Попробуйте объединить некоторые идеи из этого и предыдущих занятий. Расширьте код с числами Фибоначчи, который вы создали. Напишите и протестируйте код для создания первых 20 чисел в последовательности. Подсказка: 20-е число Фибоначчи — 6765.
- title: Выполнение задачи
  durationInMinutes: 3
  content: >
    В результате получилось нечто подобное?


    ```csharp

    var fibonacciNumbers = new List<int> {1, 1};


    while (fibonacciNumbers.Count < 20)

    {
        var previous = fibonacciNumbers[fibonacciNumbers.Count - 1];
        var previous2 = fibonacciNumbers[fibonacciNumbers.Count - 2];

        fibonacciNumbers.Add(previous + previous2);
    }

    foreach(var item in fibonacciNumbers)
        Console.WriteLine(item);
    ```


    При каждой итерации цикла суммируются два последних целых числа в списке. Полученное значение добавляется в список. Цикл повторяется, пока в список не будут добавлены 20 элементов.
- content: >-
    Вы выполнили все задачи в интерактивном руководстве. Это последний документ из серии интерактивных вводных руководств по C#. Вы можете скачать пакет SDK для .NET Core на [сайте .NET](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro), создать проект на своем компьютере и продолжать писать код. В разделе "Дальнейшие действия" вы вернетесь к этим учебникам.


    Дополнительные сведения о [коллекциях .NET](../../../standard/collections/index.md) см. в следующих статьях:

    - [Выбор типа коллекции](../../../standard/collections/selecting-a-collection-class.md)

    - [Часто используемые типы коллекций](../../../standard/collections/commonly-used-collection-types.md)

    - [Когда следует использовать универсальные коллекции](../../../standard/collections/when-to-use-generic-collections.md)
