### YamlMime:Tutorial
title: Hello World — интерактивный учебник по основам C#
metadata:
  title: Hello World — интерактивный учебник по основам C#
  description: В этом руководстве для интерактивного изучения C# используется браузер. Вы напишете код C# и сможете просмотреть результаты его компиляции и выполнения непосредственно в браузере.
  audience: Developer
  level: Beginner
  ms.date: 08/24/2018
  ms.topic: interactive-tutorial
  nextTutorialHref: numbers-in-csharp.yml
  nextTutorialTitle: Числа в C#
  displayType: two-column
  interactive: csharp
  ms.custom: mvc
  ms.openlocfilehash: 72198287028c73f0e518d7bcfd0b694bb267e132
  ms.sourcegitcommit: f0fc5db7bcbf212e46933e9cf2d555bb82666141
  ms.translationtype: HT
  ms.contentlocale: ru-RU
  ms.lasthandoff: 02/17/2021
  ms.locfileid: "100626667"
items:
- durationInMinutes: 1
  content: >
    Это руководство поможет в интерактивном изучении C#. С помощью браузера вы напишете код C# и сможете просмотреть результаты его компиляции и выполнения. Руководство содержит ряд задач, первой из которых будет написание программы Hello World. В рамках этих занятий вы ознакомитесь с основами языка C#.
- title: Запуск первой программы C#
  durationInMinutes: 2
  content: >
    Запустите приведенный ниже код в интерактивном окне. Нажмите кнопку **Перейти в режим фокусировки**. Затем введите следующий блок кода в интерактивном окне и нажмите кнопку **Выполнить**:


    ```csharp

    Console.WriteLine("Hello World!");

    ```


    Поздравляем! Вы запустили первую программу C#. Это простая программа, которая выводит сообщение "Hello World!". Для вывода используется метод <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>. `Console` — это тип, который представляет окно консоли. `WriteLine` — это метод типа `Console`, который выводит строку текста в текстовой консоли.


    Продолжим изучение. Далее в этом уроке рассматривается работа с типом `string`, который представляет текст на языке C#. Как и для типа `Console`, для типа `string` используются методы. Методы `string` работают с текстом.
- title: Объявление и использование переменных
  durationInMinutes: 3
  content: >
    При помощи вашей первой программы на экран выводится `string` "Hello World!".


    > [!TIP]

    > Вероятнее всего, при изучении C# (как и любого другого языка программирования) вы будете допускать ошибки в коде. **Компилятор** найдет эти ошибки и сообщит вам о них. Если результат содержит сообщения об ошибках, внимательно просмотрите пример кода и код в интерактивном окне, чтобы понять, что нужно исправить.

    > Это упражнение поможет вам изучить структуру кода C#.


    Функции первой программы ограничиваются выводом одного сообщения. Вы можете создавать более полезные программы с использованием *переменных*. *Переменная* — это символ, который вы можете использовать для выполнения одного и того же кода с разными значениями. Попробуем сделать это. Замените код, написанный в интерактивном окне, следующим:


    ```csharp

    string aFriend = "Bill";

    Console.WriteLine(aFriend);

    ```


    В первой строке объявляется переменная `aFriend`, и ей назначается значение Bill. Вторая строка выводит имя.


    Любой объявляемой переменной можно присваивать разные значения. Можно назначить переменной имя одного из ваших друзей. Добавьте эти две строки в интерактивном окне после кода, который вы уже добавили:


    ```csharp

    aFriend = "Maira";

    Console.WriteLine(aFriend);

    ```


    Обратите внимание, что при помощи одной и той же строки кода выводятся два разных сообщения. Они формируются на основе значения, которое хранится в переменной `aFriend`.


    Как вы могли заметить, слово Hello в двух последних сообщениях отсутствует. Исправим это.  Измените строки, которые выводят сообщение, следующим образом:


    ```csharp

    Console.WriteLine("Hello " + aFriend);

    ```


    Снова нажмите кнопку **Выполнить**, чтобы просмотреть результаты.


    Вы уже использовали `+` для создания строк из **переменных** и **констант**. Но есть способ лучше.

    Вы можете поместить переменную между символами `{` и `}`, чтобы код C# заменял этот текст значением переменной.


    Этот подход называется [интерполяцией строк](../../language-reference/tokens/interpolated.md).


    Если добавить `$` перед открывающей кавычкой строки, то внутри строки можно включать переменные в фигурных скобках, например `aFriend`. Попробуйте!



    ```csharp

    Console.WriteLine($"Hello {aFriend}");

    ```


    Снова нажмите кнопку **Выполнить**, чтобы просмотреть результаты. Вместо "Hello {aFriend}" будет выведено сообщение "Hello Maira".
- title: Работа со строками
  durationInMinutes: 5
  content: >
    Когда вы вносили последние изменения, вы ознакомились с возможностями работы со строками. Рассмотрим их подробнее.


    Между фигурными скобками можно указать более одной переменной. Попробуйте выполнить следующий код:


    ```csharp

    string firstFriend = "Maria";

    string secondFriend = "Sage";

    Console.WriteLine($"My friends are {firstFriend} and {secondFriend}");

    ```


    Изучая работу со строками, вы быстро поймете, что это не просто наборы букв. Длину строки можно узнать с помощью `Length`. `Length` — это **свойство** строки, которое возвращает количество содержащихся в ней символов. Добавьте следующий код в нижней части интерактивного окна:


    ```csharp

    Console.WriteLine($"The name {firstFriend} has {firstFriend.Length} letters.");

    Console.WriteLine($"The name {secondFriend} has {secondFriend.Length} letters.");

    ```


    > [!TIP]

    > Теперь вы можете попрактиковаться самостоятельно. Вы узнали, что `Console.WriteLine()` выводит текст на экран. Вы научились объявлять переменные и объединять строки. Поэкспериментируйте с интерактивным окном. В этом окне есть интересная функция *IntelliSense*, которая предлагает доступные варианты действий. Введите `.` после `d` в `firstFriend`. Вы увидите список рекомендаций с доступными свойствами и методами.
- title: Другие действия со строками
  durationInMinutes: 5
  content: >
    Вы уже использовали *метод* (<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>) для вывода сообщений. *Метод* — это блок кода, который реализует какое-либо действие. Ему присваивается имя, чтобы вы могли получить к нему доступ.


    Предположим, что строки содержат начальные или конечные пробелы, которые не нужно отображать. Вам нужно **обрезать** эти лишние пробелы.

    Эту задачу выполняют метод <xref:System.String.Trim%2A> и связанные с ним методы <xref:System.String.TrimStart%2A> и <xref:System.String.TrimEnd%2A>. Они просто удаляют из строки начальные и (или) конечные пробелы. Попробуйте выполнить код ниже:


    ```csharp

    string greeting = "      Hello World!       ";

    Console.WriteLine($"[{greeting}]");


    string trimmedGreeting = greeting.TrimStart();

    Console.WriteLine($"[{trimmedGreeting}]");


    trimmedGreeting = greeting.TrimEnd();

    Console.WriteLine($"[{trimmedGreeting}]");


    trimmedGreeting = greeting.Trim();

    Console.WriteLine($"[{trimmedGreeting}]");

    ```


    Квадратные скобки `[` и `]` помогают визуализировать, что делают методы `Trim`, `TrimStart` и `TrimEnd`. Квадратные скобки показывают, где начинается и заканчивается пробел.


    В этом примере демонстрируются важные принципы работы со строками. Методы управления строками возвращают новые строковые объекты, а не вносят изменения в существующие. Как видите, каждый вызов любого из методов `Trim` возвращает новую строку, а не изменяет исходное сообщение.


    Доступны и другие методы для работы со строкой. Вы наверняка уже пользовались командами поиска и замены в текстовых редакторах. Метод <xref:System.String.Replace%2A> выполняет аналогичную задачу для строк. Он находит некоторую подстроку и заменяет ее другим текстом. Метод <xref:System.String.Replace%2A> принимает два **параметра**. Это строки в скобках. Первая строка — это текст для поиска. Вторая строка — это текст для замены. Попробуйте сами. Добавьте этот код: Введите его и наблюдайте подсказки, которые появятся при вводе `.Re` после переменной `sayHello`:


    ```csharp

    string sayHello = "Hello World!";

    Console.WriteLine(sayHello);

    sayHello = sayHello.Replace("Hello", "Greetings");

    Console.WriteLine(sayHello);

    ```


    Два других полезных метода преобразуют все буквы строки в прописные или строчные. Попробуйте следующий код: Введите его и наблюдайте, как **IntelliSense** предоставит подсказки при вводе `To`:


    ```csharp

    Console.WriteLine(sayHello.ToUpper());

    Console.WriteLine(sayHello.ToLower());

    ```
- title: Поиск по строкам
  durationInMinutes: 10
  content: >
    Другая функция операции *поиска и замены* — поиск текста в строке. Для поиска вы можете использовать метод <xref:System.String.Contains%2A>. Он покажет, содержит ли строка подстроку. Попробуйте выполнить код ниже, чтобы изучить <xref:System.String.Contains%2A>:


    ```csharp

    string songLyrics = "You say goodbye, and I say hello";

    Console.WriteLine(songLyrics.Contains("goodbye"));

    Console.WriteLine(songLyrics.Contains("greetings"));

    ```


    Метод <xref:System.String.Contains%2A> возвращает *логическое* значение, которое указывает, найдена ли искомая строка. *Логическое* значение может принимать значение `true` или `false`. При выводе в текстовом формате, эти значения будут написаны с прописной буквы: `True` и `False`соответственно. *Логические* значения будут более подробно рассмотрены на одном из следующих занятий.


    ***Задача***


    Существует два схожих метода (<xref:System.String.StartsWith%2A> и <xref:System.String.EndsWith%2A>) для поиска подстрок в строках. С их помощью выполняется поиск подстроки в начале или конце строки. Попробуйте изменить пример выше таким образом, чтобы вместо <xref:System.String.Contains%2A>использовались <xref:System.String.StartsWith%2A> и <xref:System.String.EndsWith%2A>. Выполните поиск слов You или goodbye в начале строки. Выполните поиск слов hello или goodbye в конце строки.


    > [!NOTE]

    > При проверке текста в конце строки учитывайте знаки пунктуации. Если строка оканчивается точкой, необходимо проверить строки, которые оканчиваются точкой.


    Вы должны получить значение `true`, поставив слово "You" в начале, а слово "hello" — в конце, и значение false, поставив в начале или конце слово "goodbye".
- title: Выполнение задачи
  durationInMinutes: 3
  content: >
    В результате получилось нечто подобное?


    ```csharp

    string songLyrics = "You say goodbye, and I say hello";

    Console.WriteLine(songLyrics.StartsWith("You"));

    Console.WriteLine(songLyrics.StartsWith("goodbye"));


    Console.WriteLine(songLyrics.EndsWith("hello"));

    Console.WriteLine(songLyrics.EndsWith("goodbye"));

    ```
- content: >-
    Вы ознакомились с учебником по основам C#. Вы можете щелкнуть ссылку **Числа в C#** ниже, чтобы запустить следующий интерактивный учебник, либо посетить [сайт .NET](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro), чтобы скачать пакет SDK для .NET Core, создать проект на своем компьютере и продолжить написание кода. В разделе "Дальнейшие действия" вы вернетесь к этим учебникам.


    Дополнительные сведения о типе `string`:

    - [Руководство по программированию на C#](../../programming-guide/index.md), посвященное [строкам](../../programming-guide/strings/index.md).

    - [Советы по использованию строк](../../how-to/index.md#working-with-strings)
